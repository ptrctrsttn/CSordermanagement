generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id                 String      @id @default(cuid())
  shopifyId          String      @unique
  orderNumber        String
  customerName       String
  customerEmail      String
  phone              String?
  address            String?
  status            OrderStatus  @default(PENDING)
  totalAmount        Float
  orderDate          DateTime
  deliveryTime       DateTime?
  travelTime         Int?        // in minutes
  isManualTravelTime Boolean     @default(false)
  note               String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  driver             Driver?     @relation(fields: [driverId], references: [id])
  driverId           String?
  items              OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  notes     String?
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sku         String?
  orderItems  OrderItem[]
}

model StockItem {
  id        String         @id @default(cuid())
  name      String
  totalCost Float
  subItems  StockSubItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model StockSubItem {
  id          String    @id @default(cuid())
  productId   String
  productName String
  price       Float
  quantity    Float
  unit        String
  source      String
  stockItem   StockItem @relation(fields: [stockItemId], references: [id], onDelete: Cascade)
  stockItemId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model GilmoursItem {
  id                String   @id @default(cuid())
  purchaseDate     String
  sku              String
  brand            String
  productDescription String
  packSize         String
  uom              String
  price            String
  qty              String
  accountName      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([sku])
}

model BidfoodItem {
  id            String   @id @default(cuid())
  productCode   String
  brand         String
  description   String
  packSize      String
  ctnQty        String
  uom           String
  qty           String
  lastPricePaid String
  totalExGst    String
  account       String
  contains      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([productCode])
}

model OtherItem {
  id           String   @id @default(cuid())
  sku          String   @unique
  productName  String
  supplier     String
  pricePerUnit Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ProductList {
  id          String    @id @default(cuid())
  addon       String
  handle      String
  totalCost   String?
  listOfIng   String?   @map("list_of_ing")
  meat1       String?
  meat2       String?
  option1     String?
  option2     String?
  serveware   String?
  timerA      String?   @map("timer_a")
  timerB      String?   @map("timer_b")
  skuSearch   String?   @map("sku_search")
  variantSku  String    @unique @map("variant_sku")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Driver {
  id        String   @id @default(cuid())
  name      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Staff {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String
  address     String
  dateOfBirth DateTime
  payRate     Float
  isDriver    Boolean  @default(false)
  isAdmin     Boolean  @default(false)
  password    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shifts      Shift[]
}

model Shift {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime?
  notes     String?
  staff     Staff    @relation(fields: [staffId], references: [id])
  staffId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([staffId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  DELIVERED
  CANCELLED
}

enum SupplierType {
  GILMOURS
  BIDFOOD
  OTHER
}
